// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ClassLibrary_Service1.Feature.FeatureTextFile
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("APIApplication")]
    public partial class APIApplicationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SpecFlowFeature1.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "APIApplication", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get API respnse using given endpoint")]
        [NUnit.Framework.CategoryAttribute("Test1")]
        public virtual void GetAPIRespnseUsingGivenEndpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "Test1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get API respnse using given endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
    testRunner.Given("RestService \"getemployees\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table29.AddRow(new string[] {
                            "Version",
                            "1"});
                table29.AddRow(new string[] {
                            "Cval",
                            "Accept"});
#line 6
 testRunner.And("I call \"GET\" service with modified parameter", ((string)(null)), table29, "And ");
#line hidden
#line 10
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table30.AddRow(new string[] {
                            "name",
                            "Leanne Graham"});
                table30.AddRow(new string[] {
                            "website",
                            "hildegard.org"});
                table30.AddRow(new string[] {
                            "address.street",
                            "Kulas Light"});
                table30.AddRow(new string[] {
                            "address.geo.lng",
                            "81.1496"});
#line 11
 testRunner.Then("verify following response values", ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post createuser API respnse using given endpoint")]
        [NUnit.Framework.CategoryAttribute("Test2")]
        public virtual void PostCreateuserAPIRespnseUsingGivenEndpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "Test2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post createuser API respnse using given endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
  testRunner.Given("RestService \"createuser\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table31.AddRow(new string[] {
                            "contenttype",
                            "application/json"});
#line 23
 testRunner.And("I call \"POST\" service with modified parameter", ((string)(null)), table31, "And ");
#line hidden
#line 26
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table32.AddRow(new string[] {
                            "name",
                            "morpheus"});
                table32.AddRow(new string[] {
                            "job",
                            "leader"});
#line 27
 testRunner.Then("verify following response values", ((string)(null)), table32, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple API respnse using given endpoint")]
        [NUnit.Framework.CategoryAttribute("Test3")]
        public virtual void MultipleAPIRespnseUsingGivenEndpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "Test3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple API respnse using given endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 33
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
    testRunner.Given("RestService \"getemployees\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table33.AddRow(new string[] {
                            "Version",
                            "1"});
                table33.AddRow(new string[] {
                            "Cval",
                            "Accept"});
#line 35
 testRunner.And("I call \"GET\" service with modified parameter", ((string)(null)), table33, "And ");
#line hidden
#line 39
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table34.AddRow(new string[] {
                            "name",
                            "Leanne Graham"});
                table34.AddRow(new string[] {
                            "website",
                            "hildegard.org"});
#line 40
 testRunner.Then("verify following response values", ((string)(null)), table34, "Then ");
#line hidden
#line 45
    testRunner.Given("RestService \"test1\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table35.AddRow(new string[] {
                            "contenttype",
                            "application/json"});
                table35.AddRow(new string[] {
                            "Version",
                            "1"});
#line 46
 testRunner.And("I call \"GET\" service with modified parameter", ((string)(null)), table35, "And ");
#line hidden
#line 50
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table36.AddRow(new string[] {
                            "userId",
                            "1"});
                table36.AddRow(new string[] {
                            "id",
                            "1"});
                table36.AddRow(new string[] {
                            "title",
                            "delectus aut autem"});
                table36.AddRow(new string[] {
                            "completed",
                            "False"});
#line 51
    testRunner.Then("verify following response values", ((string)(null)), table36, "Then ");
#line hidden
#line 58
  testRunner.Given("RestService \"employeetype\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table37.AddRow(new string[] {
                            "contenttype",
                            "application/json"});
                table37.AddRow(new string[] {
                            "Version",
                            "1"});
#line 59
 testRunner.And("I call \"GET\" service with modified parameter", ((string)(null)), table37, "And ");
#line hidden
#line 63
  testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table38.AddRow(new string[] {
                            "userId",
                            "1"});
                table38.AddRow(new string[] {
                            "id",
                            "1"});
                table38.AddRow(new string[] {
                            "title",
                            "delectus aut autem"});
                table38.AddRow(new string[] {
                            "completed",
                            "False"});
#line 64
      testRunner.Then("verify following response values", ((string)(null)), table38, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post and  Get API 1 using given endpoint")]
        [NUnit.Framework.CategoryAttribute("Test4")]
        public virtual void PostAndGetAPI1UsingGivenEndpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "Test4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post and  Get API 1 using given endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 74
    testRunner.Given("RestService \"createuser\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table39.AddRow(new string[] {
                            "contenttype",
                            "application/json"});
#line 75
 testRunner.And("I call \"POST\" service with modified parameter", ((string)(null)), table39, "And ");
#line hidden
#line 78
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table40.AddRow(new string[] {
                            "name",
                            "morpheus"});
                table40.AddRow(new string[] {
                            "job",
                            "leader"});
#line 79
 testRunner.Then("verify following response values", ((string)(null)), table40, "Then ");
#line hidden
#line 84
 testRunner.Given("RestService \"getemployees\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table41.AddRow(new string[] {
                            "Version",
                            "1"});
                table41.AddRow(new string[] {
                            "Cval",
                            "Accept"});
#line 85
 testRunner.And("I call \"GET\" service with modified parameter", ((string)(null)), table41, "And ");
#line hidden
#line 89
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table42.AddRow(new string[] {
                            "name",
                            "Leanne Graham"});
                table42.AddRow(new string[] {
                            "website",
                            "hildegard.org"});
#line 90
 testRunner.Then("verify following response values", ((string)(null)), table42, "Then ");
#line hidden
#line 95
    testRunner.Given("RestService \"test1\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table43.AddRow(new string[] {
                            "contenttype",
                            "application/json"});
                table43.AddRow(new string[] {
                            "Version",
                            "1"});
#line 96
 testRunner.And("I call \"GET\" service with modified parameter", ((string)(null)), table43, "And ");
#line hidden
#line 100
  testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table44.AddRow(new string[] {
                            "userId",
                            "1"});
                table44.AddRow(new string[] {
                            "id",
                            "1"});
                table44.AddRow(new string[] {
                            "title",
                            "delectus aut autem"});
                table44.AddRow(new string[] {
                            "completed",
                            "False"});
#line 101
      testRunner.Then("verify following response values", ((string)(null)), table44, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Both Get and Post API 2  using given endpoint")]
        [NUnit.Framework.CategoryAttribute("Test5")]
        public virtual void BothGetAndPostAPI2UsingGivenEndpoint()
        {
            string[] tagsOfScenario = new string[] {
                    "Test5"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Both Get and Post API 2  using given endpoint", null, tagsOfScenario, argumentsOfScenario);
#line 109
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
    testRunner.Given("RestService \"createuser\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table45.AddRow(new string[] {
                            "contenttype",
                            "application/json"});
#line 111
 testRunner.And("I call \"POST\" service with modified parameter", ((string)(null)), table45, "And ");
#line hidden
#line 114
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table46.AddRow(new string[] {
                            "name",
                            "morpheus"});
                table46.AddRow(new string[] {
                            "job",
                            "leader"});
#line 115
 testRunner.Then("verify following response values", ((string)(null)), table46, "Then ");
#line hidden
#line 120
    testRunner.Given("RestService \"getemployees\" with config in \"ServiceDetail\" file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "Veriable",
                            "Value"});
                table47.AddRow(new string[] {
                            "Version",
                            "1"});
                table47.AddRow(new string[] {
                            "Cval",
                            "Accept"});
#line 121
 testRunner.And("I call \"GET\" service with modified parameter", ((string)(null)), table47, "And ");
#line hidden
#line 125
 testRunner.And("verify response should return \"OK\" as statuscode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "nodePath",
                            "value"});
                table48.AddRow(new string[] {
                            "name",
                            "Leanne Graham"});
                table48.AddRow(new string[] {
                            "website",
                            "hildegard.org"});
#line 126
 testRunner.Then("verify following response values", ((string)(null)), table48, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
